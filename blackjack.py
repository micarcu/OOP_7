# импортируем модуль os
import os
# импортируем модуль random
import random
# устанавливаем переменную окружения, предварительно узнав
# свой тип консоли в терминале командой echo $TERM
os.environ['TERM'] = 'xterm'

# просим пользователя ввести количество колод
decks = input("Введите количество колод: ")
# умножаем список карт одной масти на 4 и на количество колод decks
deck = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14] * (int(decks) * 4)

# устанавливаем начальные значения счётчиков побед и поражений
wins = 0
losses = 0

# функция выдачи двух начальных карт
def deal(deck_func):
   # создаём список без карт
   hand = []
   # дважды запускаем цикл
   # перемешиваем все карты в общей колоде
   random.shuffle(deck_func)
   for i in range(2):
       # достаём последний элемент списка, «верхнюю карту»
       card = deck_func.pop()
       # присваиваем карте понятное обозначение, если карта — картинка
       # валет
       if card == 11:
           card = "J"
       # дама
       if card == 12:
           card = "Q"
       # король
       if card == 13:
           card = "K"
       # туз
       if card == 14:
           card = "A"
       # добавляем карту на руку игроку
       hand.append(card)
   # возвращаем из функции список с двумя картами
   return hand

# функция запуска нового раунда игры после окончания предыдущего
def play_again():
   # спрашиваем у пользователя, хочет ли он играть ещё
   again = input("Хотите сыграть снова? (Да/Нет) : ").lower()
   # если хочет, запускаем основную функцию игры
   if again == "да":
       game()
   # если не хочет, показываем финальное сообщение и закрываем программу
   else:
       print("\033[0;35;40mКазино всегда выигрывает!\033[0m")
       exit()

# функция подсчёта очков по картам на руке
def total(hand):
   # устанавливаем начальное нулевое значение
   points = 0
   # запускаем цикл, который проверит все карты в списке hand
   for card in hand:
       # если карта — картинка, то прибавляем 10
       if card == "J" or card == "Q" or card == "K":
           points += 10
       # туз считается в зависимости от количества очков
       elif card == "A":
           if points >= 11:
               points += 1
           else:
               points += 11
       # все остальные карты считаются по своему номиналу
       else:
           points += card
   # возвращаем количество очков
   return points

# функция добавления новой карты
def hit(hand):
   # берём карту с конца списка общей колоды — «снимаем карту сверху»
   card = deck.pop()
   # присваиваем карте понятное обозначение, если карта — картинка
   # валет
   if card == 11:
       card = "J"
   # дама
   if card == 12:
       card = "Q"
   # король
   if card == 13:
       card = "K"
   # туз
   if card == 14:
       card = "A"
   # добавляем карту на руку
   hand.append(card)
   # возвращаем новый список
   return hand

# функция вывода результатов
def print_results(dealer_hand, player_hand):
   # выводим на экран результаты раунда
   print("\n*** РЕЗУЛЬТАТЫ РАУНДА ***\n")
   # выводим список карт на руке в формате строки и считаем сумму очков для раздающего и игрока
   print("У раздающего на руке: " + str(dealer_hand) + ", в сумме: " + str(total(dealer_hand)))
   print("У вас на руке: " + str(player_hand) + ", в сумме: " + str(total(player_hand)))

# функция проверки начальной раздачи на 21
def blackjack(dealer_hand, player_hand):
   # добавляем в область видимости счётчики побед и поражений
   global wins
   global losses
   # проверяем очки игрока на 21
   if total(player_hand) == 21:
       # если у игрока 21, выводим результаты, пишем
       # сообщение о выигрыше, увеличиваем счётчик побед
       print_results(dealer_hand, player_hand)
       print("Поздравляю! У вас блек-джек, вы выиграли!\n")
       wins += 1
       # предлагаем сыграть снова
       play_again()
   # проверяем очки раздающего на 21
   elif total(dealer_hand) == 21:
       # если у раздающего 21, выводим результаты, пишем
       # сообщение о проигрыше, увеличиваем счётчик поражений
       print_results(dealer_hand, player_hand)
       print("Простите, вы проиграли. У раздающего блек-джек.\n")
       losses += 1
       # предлагаем сыграть снова
       play_again()
   elif total(dealer_hand) == total(player_hand):
       # выводим результаты игрока и раздающего
       print_results(dealer_hand, player_hand)
       # выводим сообщение о победе и итоговом результате
       print("У вас и у раздающего блек-джек. В этом раунде победителя нет.\n")
       # предлагаем сыграть снова
       play_again()

# функция подсчёта очков
def score(dealer_hand, player_hand):
   # добавляем в область видимости счётчики побед и поражений
   global wins
   global losses
   # проверяем очки
   # если у игрока 21:
   if total(player_hand) == 21:
       # выводим результаты игрока и раздающего
       print_results(dealer_hand, player_hand)
       # выводим сообщение о победе и итоговом результате
       print("Поздравляю! У вас 21, вы выиграли!\n")
       wins += 1
   # если у раздающего 21
   elif total(dealer_hand) == 21:
       # выводим результаты игрока и раздающего
       print_results(dealer_hand, player_hand)
       # выводим сообщение о проигрыше и итоговом результате
       print("Простите, вы проиграли. У раздающего 21.\n")
       losses += 1
   # если у раздающего больше очков
   elif total(player_hand) < total(dealer_hand):
       # выводим результаты игрока и раздающего
       print_results(dealer_hand, player_hand)
       # выводим сообщение о проигрыше и итоговом результате
       print("У раздающего больше очков, чем у вас. Вы проиграли.\n")
       losses += 1
   # если у игрока больше очков
   elif total(player_hand) > total(dealer_hand):
       # выводим результаты игрока и раздающего
       print_results(dealer_hand, player_hand)
       # выводим сообщение о победе и итоговом результате
       print("Поздравляю, у вас больше очков, чем у раздающего. Вы выиграли!\n")
       wins += 1
   elif total(player_hand) == total(dealer_hand):
       # выводим результаты игрока и раздающего
       print_results(dealer_hand, player_hand)
       # выводим сообщение о победе и итоговом результате
       print("Раздающий набрал столько же, сколько и вы. В этом раунде победителя нет.\n")

# основная функция игры
def game():
   # добавляем в область видимости счётчики побед и поражений
   global wins
   global losses

   # выводим оформление нового раунда
   print("\n    Новая игра!\n")
   # выводим 30 коротких тире
   print("-" * 30 + "\n")
   # выводим слово ПОБЕДЫ жирным зелёным шрифтом, слово ПОРАЖЕНИЯ — жирным красным
   # и после каждого слова ставим корректные счётчики
   print("    \033[1;32;40mПОБЕДЫ:  \033[1;37;40m%s   \033[1;31;40mПОРАЖЕНИЯ:  \033[1;37;40m%s\n\033[0m" % (wins, losses))
   # выводим 30 коротких тире
   print("-" * 30 + "\n")

   # раздаём по две карты игроку и раздающему
   dealer_hand = deal(deck)
   player_hand = deal(deck)

   # раздающий раскрывает одну карту
   print("Раздающий показывает " + str(dealer_hand[0]))
   # говорим игроку, что за карты у него на руке и сколько очков
   print("У вас на руке:" + str(player_hand) + ", в сумме количество очков равно " + str(total(player_hand)))
   # проверяем, есть ли у кого-то 21
   blackjack(dealer_hand, player_hand)

   # запускаем бесконечный цикл
   while True:
       # спрашиваем у игрока, что он хочет сделать
       choice = input("\033[1;33;40mВы хотите [д]обрать карту, [о]становиться или [в]ыйти из игры? \033[0m").lower()
       # при выборе добрать карту
       if choice == 'д':
           # запускаем функцию добавления карты
           hit(player_hand)
           # выводим новый список карт
           print(player_hand)
           # выводим на экран сумму очков
           print("Сумма ваших очков: " + str(total(player_hand)))
           # если у игрока больше 21 очка, выводим сообщение о проигрыше,
           # увеличиваем счётчик поражений, предлагаем сыграть заново
           if total(player_hand) > 21:
               print('У вас перебор')
               losses += 1
               play_again()

       # при выборе остановиться ход переходит раздающему
       elif choice == 'о':
           # пока у дилера меньше 17 очков, он должен добирать карты
           while total(dealer_hand) < 17:
               hit(dealer_hand)
               # после каждой новой карты выводим список карт раздающего
               print('Раздающий взял новую карту. У него на руках: ', dealer_hand)
               # если у раздающего больше 21 очка, выводим сообщение о выигрыше,
               # увеличиваем счётчик побед, предлагаем сыграть заново
               if total(dealer_hand) > 21:
                   print('У раздающего перебор, вы выиграли!')
                   wins += 1
                   play_again()
           # если раздающий набрал 17 очков и у него не перебор, подсчитываем очки обоих
           else:
               score(dealer_hand, player_hand)
               play_again()

       # если игрок решил завершить игру, выводим сообщение и завершаем программу
       elif choice == "в":
           print("\033[0;35;40mКазино всегда выигрывает!\033[0m")
           exit()
       # если пользователь ввёл какое-то непредусмотренное значение, просим повторить ввод
       else:
           print("Неверный ввод. Пожалуйста, введите 'д', 'о' или 'в'.")

# запускаем основную функцию игры
game()